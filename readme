INTRODUCTION TO JS
JS - a programming language that interacts with the browser to make pages interactive and dynamic
JS - what do we use it for?
  -> 1. User Interactivity - how the user interacts with a page e.g scroll, click, hover, typing e.t.c
    -> 2. Reactivity - load data to a page

Where To write JS ?
  -> Written inside a script tag

1. Internal JS - in a HTML File
  -> script tag in the head section
    -> inside the body tag -> common
2. External JS -> external script file -> script with an src attribute
  -> used when writing a lot of JS

JS DATA TYPES
1.string - characters or text
2.boolean - Truth values(True or False)
3.number(covers both floats and integers)

JS VARIABLES
Variable - named container used to store data / values
x = 4
How to declare JS variables \***\* keywords used to declare JS variables\*\***
  1.let - used when you can reassign / change the value of a variable
2.const - used when the value of variable is a constant / cant be changed
3.var - the old way to declare variables in older browsers - replaced by let -> depracated / outdated

const pi = 3.142
let x = 5
x = 10
let name = "Jane"
name = "jane doe"

How to output data in JS ?
  -> console.log() -> print()
  -> access value in console window in the browser
    -> check data type -> typeof ()

x = 5
y = 10
z = x + y

STRING METHODS
Methods - special inbuilt function
  Functions that are used to manipulate string data
    -> Most methods aare accessed using the dot operator (.)
1.length - checks for the no characters in a string
let name = "Jack"
console.log(name.length)
2.charAt() - return the character at a specified index
3.toUpperCase() -> converts lowercase string to upper case
4.toLowerCase() -> converts uppercase strings data to lower case
5.indexOf() -> find the index of a character in a given string
6.slice() -> divides a string into substrings using index
7.repeat() -> replicates a string to a specified number
8.trim() -> removes all whitespaces
9.seacrh() - returns boolean(1 or - 1) to check whether a string of chars exists in a string
10.split() -> split string data into mutiple strings and store them in an array
11.concat() - combining strings
12.startsWith() - returns a boolean to check whether a string starts with specified chars
13.endsWith()
14.includes()
15.substring()
16.replace()

NUMBER METHODS
1.toString() -> converts a number into a string
2.parseInt() - convert a string into an integer
3.parseFloat() - converts a string into a floating number
N / B -> the string to be converted to a number has to be a number in the first place
4.toFixed() - fixed no of decimals

TASK
  -> Slide 53 - Strings

0714056473 - Brian Letting

Condtionl Statements
Decision makers

if (condition) {
what happens when condition is true
} else {
what happens when condition is false
}

if (condition) {
what happens when 1st condition is true
} else if (condition) {
what happens when 2nd condition is true
} else if (condition) {
what happens when 3rd condition is true
} else {
what happens when all conditions are false
}

Conditional Statements Tasks
1.Tasks on slide 66
2.Write a JavaScript conditional statement to sort three numbers
3.Write a JavaScript program that computes the average marks of students based on the scale below
70 - 100 -> A
60 - 69 -> B
50 - 59 -> C
40 - 49 -> D
  < 40 -> E

DATA STRUCTURES
1.ARRAYS -> a data structure that can hold more than one value at a time
--Its equivalent to lists in Python
  -> They are ordered - can be accessed via index
    -> They are mutable - can be changed
      -> Can hold values of different data types
        -> Can hold multiple values
          -> Values are comma - separated
            -> JS arrays dont support - ve indexing directly -> use.at()

syntax for creating an array
let arr = [1, 2, "dog", true, ["Mike"]]

Array Operations
1.Accessing items in an array -> indexing
2.Update or modify values in an array -> indexing
3.Determine the size of an array -> array.length -> shows no of items in an array 4. Adding items to an array
array.push() - add at the end
array.unshift() - at the beginning 5. Removing array elements
array.pop() - removes last element of an array
array.shift - remove first element of an array 6. array.at() - access elements at a specified index -> supports - ve indexing
7 array.concat() - creates a new array by merging existing arrays 8. array.includes() - checks whether an element is contained in an array - returns boolean 9. array.sort() - arranges array elements in ascending order
10.array.slice() - creating a portion of an aarraay using indexing (start, end)

2.OBJECTS
An object is a container / data structure that stores data in key - value pairs
  -> Equivalent to a dictionary in Python

Xtics of Objects
  -> Store data in key value pairs
    -> Mutable
    -> Enclosed in {}
    -> Values are accessed using keys
-> Keys are strings
  -> Values can be of any data type
    -> They have methods

Why we use Objects
1.To store correlated data
2.To store complex structured data 3. To represent real world entities

e.g let car = {
  "car make ": "Volvo",
  "yom": 2015,
  "com": "Sweden",
  "new": false
}

console.log(car.make)
console.log(car["make"])

let student = {
  "name": "Jake",
  "sid": 37774,
  "school": "Techcamp Africa"
}

let laptop = {
  "make:"Mac",
"year": 2018,
  "Processor": "M2",
}
"make": "Volvo", -> property -> key + value = property

Accessing Values in an Object

1. dot notation(.) -> works only when the key names are valid identifiers
  - cant access values that have spaces
2. bracket notation["key"] - can access keys that have spaces

Object Methods
Object.keys(object) - returns all object keys in an array
Object.values(object) - returns all object values in an array
Object.entries(object) - returns key value pairs - each pair in its own array

ARRAYS && OBJECTS TASKS

  -> Array tasks - slide 69 & 70
    -> determine and apply the use of the following array methods:
1.splice(). 2.join(). 3.reverse(). 4.toString(). 5.indexOf()
  -> Objects Tasks - slide 75 & 76

Data Types - number, string, boolean
Data Structures - arrays, objects

strings - methods
arrays - properties and methods
objects - key value pairs & object properties

Array - a data structure that holds more than one value of any data type
  -> Equivalent to lists in Python
properties
1.Can hold more than one value of any data type
2.They are mutable
3.They are ordered - indexing(zero based)
----> By default JS arrays dont have - ve indexing \_ > to use - ve index use method at()

syntax = let arr = [1, 2, "Three", false, [5, 6]]
arr.at(-1)
arr[2] = "four"

splice() method

1. add elements to an array
array.splice(starting point, elements to be removed, elements to be added)
2. remove elements from an array
array.splice(starting point, how many to remove)
3. replace elements in an array

Task 4, 5 & 6 Objects
// splice()
my_object = [23, “Jane”, 560, [“Lesson”, “Maths”, {“currency” : “KES” }], 987, 76,”John”]

//. In the object with the key currency, add another key “amount” with value 90 5. Reverse 987 to 789 without using an inbuilt -method or Assigning 789 manually.
Hint: arrays can be reversed using reverse() functions


TASK - arrays and objects
let company = {
  name: "TechCorp",
  founded: 2010,
  location: {
    country: "Kenya",
    city: "Nairobi",
    address: {
      street: "Kenyatta Avenue",
      building: "Tech Plaza",
      floor: 5
    }
  },
  departments: [
    {
      name: "Engineering",
      head: "Alice",
      employees: [
        { id: 1, name: "John", role: "Frontend Developer", skills: ["JavaScript", "React", "CSS"] },
        { id: 2, name: "Sarah", role: "Backend Developer", skills: ["Python", "Django", "PostgreSQL"] }
      ]
    },
    {
      name: "Marketing",
      head: "Bob",
      employees: [
        { id: 3, name: "Mike", role: "SEO Specialist", skills: ["SEO", "Google Analytics", "Content Writing"] },
        { id: 4, name: "Jane", role: "Social Media Manager", skills: ["Facebook Ads", "Instagram", "Brand Strategy"] }
      ]
    }
  ],
  projects: [
    {
      title: "E-commerce Website",
      deadline: "2025-09-30",
      team: [1, 2] // Employee IDs
    },
    {
      title: "Brand Awareness Campaign",
      deadline: "2025-10-15",
      team: [3, 4]
    }
  ]
};


1. Display the following
> Instagram
> PostgreSQL
> E-commerce Website
>Tech Plaza
> 4 in team
2.Change the value of:
>Google Analytics to AWS



LOOPS 
Repetitive action / task 
Types of Loops 
1. For - has to have a starting point, condition to be met, update
2. While - always executes as long the specified condition is true
3. Do while - will execute at least once before even checking if the condition is met

syntax -> for(starting point;condition;update){
      // iteration
}
starting point -> where is my iteration starting from e.g output numbers from 0 to 100 -> s.point -> 0
condition -> condition to be met so that the loop keeps running 
update -> increment or decrement

e.g.
//output numbers from 0 to 100
for(i=0; i<=100; i++){
  console.log(i)        
}
0 -> 1 ->2 -> 3

Looping Through a data structure e.g arrays

let fruits = ["mango","orange","banana","apple","peach"]

i> 5

Backwards Loop
-> Update from increment to decrement 





CONDITIONAL STATEMENTS 
-> Ability to make decisions 
-> Check whether a no is even or odd
-> Criteria of making a choice -> num% 2 = 0 -> even 

if(num%2==0){
    console.log("even")
}else{
    console.log("odd")
}

if(condition){
  //what happens if condition is true
}else{
  // what happens if condition is false
}

if(condition 1){
  // what happens if condition 1 is true
}else if(condition 2){
  // what happens if condition 2 is true
}}else if(condition 3){
  // what happens if condition 3 is true
}else{
  // what happens if all conditions are false
}
curly braces -> in JS -> blocks



Assignment 2: Extract Subarray
Given an array “sourceArray”, extract a subarray “extractedArray” from index 2 to index 4
using the .slice() method. Then, modify the extractedArray by replacing its elements
with 'x', 'y', and 'z' using the .splice() method. Finally, display both the sourceArray
 and the modified extractedArray.



 TAking user input in JS
 -> prompt() -> function that takes user input 
 -> ALL DATA FROM USER INPUT IS A STRING



LOOPS TASK -> slide 79 
Use a while and for loop to write a program that checks for a user's password
and lets them input  password 4 times .Upon failure display "User is blocked"


FUNCTIONS
A function is a reusable block of code used to perform a specific task

Why use functions?
1. Reusability of code 
2. Modularity -> breaking large code into smaller pieces 
3. Organization of code
4. Easier debugging
5. Readability



*global vs local variable
global variable -> a variable that is accessible in the entire program / global space
local variable -> accessible only within its local / block scope


*argument vs parameter 
parameter -> a placeholder / temporary value when defining a function
argument -> exact value passed when calling a function

functions use return keyword -> signify the end of a function


SYNTAX

function function_name(){
  // function body
}

function function_name(x,y){
    return x + y
}

function_name()


TASK
slide 80
questions 1 -20 