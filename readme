INTRODUCTION TO JS
JS - a programming language that interacts with the browser to make pages interactive and dynamic
JS - what do we use it for?
-> 1. User Interactivity - how the user interacts with a page e.g scroll, click ,hover, typing e.t.c
-> 2. Reactivity - load data to a page



Where To write JS?
-> Written inside a script tag
1. Internal JS - in a HTML File
    -> script tag in the head section 
    -> inside the body tag -> common 
2. External JS -> external script file -> script with an src attribute 
     ->used when writing a lot of JS

JS DATA TYPES
1.string - characters or text
2.boolean - Truth values (True or False)
3.number (covers both floats and integers)

JS VARIABLES
Variable - named container used to store data / values
x = 4
How to declare JS variables
****keywords used to declare JS variables****
1.let - used when you can reassign / change the value of a variable
2.const - used when the value of variable  is a constant / cant be changed
3.var - the old way to declare variables in older browsers - replaced by let -> depracated / outdated

const pi = 3.142
let x = 5
x = 10
let name = "Jane"
name = "jane doe"

How to output data in JS?
-> console.log() -> print()
-> access value in console window in the browser
-> check data type -> typeof()

x = 5
y =10
z = x + y



STRING METHODS
Methods - special inbuilt function
Functions that are used to manipulate string data 
-> Most methods aare accessed using the dot operator (.)
1.length - checks for the no characters in a string  
let name = "Jack"
console.log(name.length)
2.charAt() - return the character at a specified index
3.toUpperCase() -> converts lowercase string to upper case
4.toLowerCase() -> converts uppercase strings data to lower case
5.indexOf() -> find the index of a character in a given string
6.slice() ->divides a string into substrings using index
7.repeat() -> replicates a string to a specified number
8.trim() -> removes all whitespaces
9.seacrh() - returns boolean(1 or -1) to check whether a string of chars exists in a string
10.split() -> split  string dataa  into mutiple strings and store them in an array
11.concat() - combining strings
12.startsWith() - returns a boolean to check whether a string starts with specified chars
13.endsWith()
14.includes()
15.substring()
16.replace()


NUMBER METHODS
1.toString() -> converts a number into a string
2.parseInt() - convert a string into an integer
3.parseFloat() - converts a string into a floating number
N/B -> the string to be converted to a number has to be a number in the first place
4.toFixed() - fixed no of decimals


TASK 
->Slide 53 -Strings


0714056473 - Brian Letting



Condtionl Statements 
Decision makers

if(condition){
    what happens when condition is true
}else{
    what happens when condition is false
}


if(condition){
    what happens when 1st condition is true
}else if(condition){
    what happens when 2nd condition is true
}else if(condition){
    what happens when 3rd condition is true
}else{
    what happens when all conditions are false
}


Conditional Statements Tasks
1.Tasks on slide 66
2.Write a JavaScript conditional statement to sort three numbers
3.Write a JavaScript program that computes the average marks of students based on the scale below
70-100 -> A 
60-69 -> B
50-59 -> C
40 - 49 -> D
< 40 -> E


DATA STRUCTURES
1.ARRAYS  -> a data structure that can hold more than one value at a time 
--Its equivalent to lists in Python
-> They are ordered - can be accessed via index
-> They are mutable - can be changed
-> Can hold values of different data types
-> Can hold multiple values
-> Values are comma-separated
-> JS arrays dont support -ve indexing directly -> use .at()

syntax for creating an array
let arr = [1,2,"dog",true,["Mike"]]

Array Operations
1.Accessing items in an array -> indexing
2.Update or modify values in an array -> indexing
3.Determine the size of an array -> array.length -> shows no of items in an array
4. Adding items to an array 
    array.push() - add at the end 
    array.unshift() - at the beginning
5. Removing array elements 
    array.pop() - removes last element of an array
    array.shift - remove first element of an array
6. array.at() - access elements at a specified index -> supports -ve indexing
7  array.concat() -  creates a new array by merging existing arrays
8. array.includes() - checks whether an element is contained in an array - returns boolean
9. array.sort() - arranges array elements in ascending order
10. array.slice()- creating a portion of an aarraay using indexing (start,end)




2.OBJECTS
An object is a container / data structure that stores data in key-value pairs
-> Equivalent to a dictionary in Python 

Xtics of Objects
->Store data in key value pairs
->Mutable
->Enclosed in {}
->Values are accessed using keys 
->Keys are strings
->Values can be of any data type
->They have methods 

Why we use Objects
1.To store correlated data
2.To store complex structured data
3. To represent real world entities

e.g let car = {
    "make":"Volvo",
    "Yom":2015,
    "com":"Sweden",
    "new":false
}

let student ={
    "name":"Jake",
    "sid":37774,
    "school":"Techcamp Africa"
}

let laptop ={
    "make:"Mac",
    "year":2018,
    "Processor":"M2",
}
 "make":"Volvo", -> property -> key + value = property

 Accessing Values in an Object
1. dot notation (.) -> works only when the key names are valid identifiers 
 -cant access values that have spaces
2. bracket notation ["key"] - can access keys that have spaces


          ARRAYS && OBJECTS TASKS
-Array tasks - slide 69 & 70
-> determine and apply the use of the following array methods:
1.splice().   2.join().  3.reverse().  4.toString(). 5.indexOf()
-Objects Tasks - slide 75 & 76






